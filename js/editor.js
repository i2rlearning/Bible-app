const Size = Quill.import('attributors/style/size');
Size.whitelist = ['8px','10px','12px','14px','16px','18px','24px','32px']; //also upate editor.css
Quill.register({ 'formats/size': Size }, true);

const toolbarOptions = [
  [{ size: Size.whitelist }],    // numeric dropdown
  ['bold','italic','underline','strike'],
  [{ color: [] }, { background: [] }],
  [{ list: 'ordered' }, { list: 'bullet' }, { list: 'check' }],
  [{ align: [] }],
  [{ script: 'sub' }, { script: 'super' }],
  [{ indent: '-1' }, { indent: '+1' }],
  [{ direction: 'rtl' }],
  ['link','image'],
  ['clean']
];

const quill = new Quill('#editor', {
  placeholder: 'Notes...',
  theme: 'snow',
  modules: { toolbar: toolbarOptions }
});

const toolbar = quill.getModule('toolbar');
const sizeSelect = toolbar?.container.querySelector('select.ql-size');

// ----------------------------------------------------
// Formatting Logic
// ----------------------------------------------------
if (quill.getLength() <= 1) {
  quill.format('size', '14px');
} else {
  // If content already present, apply once across it
  quill.formatText(0, quill.getLength(), { size: '14px' });
}

// ----------------------------------------------------
// Sync Dropdown Value AND Add Tooltips
// ----------------------------------------------------
if (sizeSelect) {
  // Add the Tooltip (the new part) ðŸ’¡
  sizeSelect.setAttribute('title', 'Change Font Size'); 

  // Sync the dropdownâ€™s visible value (your existing logic)
  sizeSelect.value = '14px';
  sizeSelect.dispatchEvent(new Event('change'));
}

// Optional: Add tooltips for other buttons generated by Quill
// SIMPLE BUTTONS (ql-bold, ql-link, ql-clean, etc.) ---
toolbar.container.querySelector('button.ql-bold')?.setAttribute('title', 'Bold');
toolbar.container.querySelector('button.ql-italic')?.setAttribute('title', 'Italic');
toolbar.container.querySelector('button.ql-underline')?.setAttribute('title', 'Underline');
toolbar.container.querySelector('button.ql-strike')?.setAttribute('title', 'Strikethrough');
toolbar.container.querySelector('button.ql-link')?.setAttribute('title', 'Insert Link');
toolbar.container.querySelector('button.ql-image')?.setAttribute('title', 'Insert Image');
toolbar.container.querySelector('button.ql-clean')?.setAttribute('title', 'Clear Format');
toolbar.container.querySelector('button.ql-direction')?.setAttribute('title', 'Text Direction');
toolbar.container.querySelector('button.ql-script[value="sub"]')?.setAttribute('title', 'Subscript');
toolbar.container.querySelector('button.ql-script[value="super"]')?.setAttribute('title', 'Superscript');

// Target the SELECT elements 
// ALIGN 
const alignSelect = toolbar.container.querySelector('select.ql-align');
if (alignSelect?.parentElement) {
    alignSelect.parentElement.setAttribute('title', 'Align Text');
}

//  COLOR AND BACKGROUND 
// Get all select elements that Quill uses for color/background within the toolbar
const colorPickers = toolbar.container.querySelectorAll('select.ql-color, select.ql-background');

colorPickers.forEach(picker => {
    // Check if the picker element itself has the ql-background class
    if (picker.classList.contains('ql-background')) {
        if (picker.parentElement) {
            picker.parentElement.setAttribute('title', 'Background Color');
        }
    } 
    // Otherwise, assume it is the font color picker (ql-color)
    else if (picker.classList.contains('ql-color')) {
        if (picker.parentElement) {
            picker.parentElement.setAttribute('title', 'Font Color');
        }
    }
});

// Target the BUTTONS inside the LIST/CHECK group (for list, bullet, and check)
toolbar.container.querySelector('button.ql-list[value="ordered"]')?.setAttribute('title', 'Ordered List');
toolbar.container.querySelector('button.ql-list[value="bullet"]')?.setAttribute('title', 'Bullet List');
toolbar.container.querySelector('button.ql-list[value="check"]')?.setAttribute('title', 'Checkbox List');

// Target the BUTTONS for indent/outdent
// Note: You must select by the value attribute for these grouped buttons
toolbar.container.querySelector('button.ql-indent[value="-1"]')?.setAttribute('title', 'Outdent');
toolbar.container.querySelector('button.ql-indent[value="+1"]')?.setAttribute('title', 'Indent');
